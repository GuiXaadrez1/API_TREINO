
import { JSX } from 'react';
import styled from 'styled-components';

//import instagram from '../assets/instagram.png
//import facebook from '../assests/facebook.png


const FooterEstilizado = styled.footer`

  height: 100%;
  color: #0000FF;
  padding: 1em;
  background-color: #6495ED;
  text-align:center;
`

const ListaEstilizada = styled.ul`

  display: flex;
  justify-content: space-around;
  width:10%;
  margin: 1em auto;

`

const ItemEstilizado = styled.li`
  list-style-type:none;
`

// Tipagem: logos agora √© obrigat√≥rio e um array de strings
interface LogosProps {
  logos?: string[];
}

const Footer = ({ logos }: LogosProps): JSX.Element => {
  return (
    <FooterEstilizado>
      <ListaEstilizada>
        {logos?.map((logo, index) => (
          <ItemEstilizado key={index}>
            <a href="#">
              <img src={logo} alt={`imagem da rede social ${index + 1}`} />
            </a>
          </ItemEstilizado>
        ))}
      </ListaEstilizada>
      <p>Merm√£o eu to tentando entender essa bagaceira aqui!</p>
    </FooterEstilizado>
  );
};

export default Footer;


/* 
    FORMA MAIS F√ÅCIL DE FAZER ISSO DIN√ÇMIZADO SEM USAR ARRAY:

      Para inserir mais informa√ß√µes sobre redes sociais voc√™ vai, primeiro, precisar 
      importar as imagens delas:

      import whatsapp from './assets/whatsapp.png';
      import instagram from './assets/instagram.png';
      import google from './assets/google.png';Copiar c√≥digo

        Depois, vai inserir o componente <ItemEstilizado> para substituir o elemento <li>
        e, dentro dele, inserir uma √¢ncora para a rede social. Dentro dessa √¢ncora, 
        vai a imagem referente a logo da rede social em espec√≠fico.

      Fa√ßa isso para cada uma delas e chegue no resultado:

        <ItemEstilizado>
          <a href="#">
            <img src={whatsapp} alt="logo do whatsapp" />
          </a>
        </ItemEstilizado>
        <ItemEstilizado>
          <a href="#">
            <img src={google} alt="logo do google" />
          </a>
        </ItemEstilizado>
        <ItemEstilizado>
            <a href="#">
                <img src={instagram} alt="logo do instagram" />
            </a>
        </ItemEstilizado>

      Basicamente: Voc√™ faria como se estivesse fazendo no HTML5 ou 4

*/



/*
  

RELAT√ìRIO DE COMO FUNCIONA O C√ìDIGO DIN√ÇMISADO COM ARRAY


üîç EXPLICA√á√ÉO LINHA POR LINHA

import { JSX } from 'react';
import styled from 'styled-components';

  ‚Üí Importamos o styled-components, uma biblioteca que permite criar componentes com
  estilo (CSS) embutido diretamente no JS/TS.

üì¶ COMPONENTES ESTILIZADOS

  const FooterEstilizado = styled.footer`
    height: 100%;
    color: #0000FF;
    padding: 1em;
    background-color: #6495ED;
    text-align:center;
  `
  ‚Üí Criamos um componente estilizado com base em <footer> (rodap√© HTML). 
  Esse estilo √© aplicado apenas nesse componente.

  const ListaEstilizada = styled.ul`
    display: flex;
    justify-content: space-around;
    width:10%;
    margin: 1em auto;
  `
  ‚Üí Componente baseado em <ul>. Os itens da lista ficam dispostos lado a lado (flex) e 
  espa√ßados igualmente.

  const ItemEstilizado = styled.li`
    list-style-type: none;
  `
  ‚Üí Componente baseado em <li>. Removemos os marcadores de lista (bolinhas).

üî° INTERFACE

  interface LogosProps {
      logos?: string[]; // Array de caminhos de imagens (ex: ['/logo1.png', '/logo2.png'])
    }
  
  ‚Üí Definimos a interface LogosProps. O ? indica que a prop logos √© opcional. 
  Se n√£o for passada, n√£o d√° erro.


üß† FUN√á√ÉO DO COMPONENTE Footer

  
  const Footer = ({ logos }: LogosProps): JSX.Element => {

  ‚Üí Criamos o componente Footer, que espera um array de logos como props. 
  Ele retorna JSX (um bloco visual do React).

üß≠ AQUI VEM O MAP()

  {logos?.map((logo, index) => (

üîπ logos?.map(...)
  
  ‚Üí Se logos existir (n√£o for undefined), executamos o .map().
  
  ‚Üí O .map() √© usado para iterar sobre cada item do array logos e retornar um novo array 
  de JSX. Cada imagem gera um item da lista.

üîπ (logo, index)
  
  ‚Üí logo: representa o valor atual do array (ex: caminho da imagem).
  ‚Üí index: representa a posi√ß√£o atual no array (0, 1, 2...).

üîπ key={index}
    
    ‚Üí A key √© obrigat√≥ria quando usamos .map() em elementos JSX.
    
    ‚Üí O React usa essa key para rastrear e identificar os elementos na renderiza√ß√£o, 
    especialmente em atualiza√ß√µes.
    
    ‚Üí Aqui usamos o index como key por ser simples, mas o ideal em apps reais √© usar uma
    id √∫nica (se dispon√≠vel), para evitar problemas com reordena√ß√£o de listas.

    <ItemEstilizado key={index}>
      <a href="#">
        <img src={logo} alt={`imagem da rede social ${index + 1}`} />
      </a>
    </ItemEstilizado>
    
    ‚Üí Para cada imagem (logo), criamos um <li> estilizado.
    
    ‚Üí Dentro dele, um <a> com o link (pode ser atualizado depois).

    ‚Üí O <img> mostra a imagem da logo com um texto alternativo (alt) din√¢mico com base
    no √≠ndice.

    <p>Merm√£o eu to tentando entender essa bagaceira aqui!</p>
    ‚Üí Um par√°grafo de teste que ser√° exibido no rodap√©.

  EXPORTA√á√ÉO
 
    export default Footer;
      ‚Üí Exporta o componente para ser usado em outros arquivos, como no App.tsx.

  RESUMO DO map() NO JSX

    logos.map((logo, index) => (
      <ItemEstilizado key={index}>
        <img src={logo} alt={`imagem da rede social ${index + 1}`} />
      </ItemEstilizado>
    ));

    .map() serve para gerar JSX dinamicamente baseado em arrays.

    logo: o item do array em cada itera√ß√£o.

    index: posi√ß√£o do item no array.

    key={index}: ajuda o React a manter o controle da lista renderizada.






















*/